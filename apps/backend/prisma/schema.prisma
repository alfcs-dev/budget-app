// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum BudgetPeriod {
  MONTHLY
  BIWEEKLY
  ANNUAL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts   Account[]
  categories Category[]
  expenses   Expense[]
  budgets    Budget[]
  transfers  Transfer[]

  @@map("users")
}

model Account {
  id            String      @id @default(cuid())
  name          String
  type          AccountType
  bankCode      String?
  accountNumber String?
  clabe         String?     @unique
  balance       Decimal     @db.Decimal(12, 2)
  isActive      Boolean     @default(true)
  description   String?
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses      Expense[]
  transfersFrom Transfer[] @relation("TransferFrom")
  transfersTo   Transfer[] @relation("TransferTo")

  @@map("accounts")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  expenses Expense[]
  budgets  Budget[]

  @@unique([name, userId])
  @@map("categories")
}

model Expense {
  id                String   @id @default(cuid())
  description       String
  amount            Decimal  @db.Decimal(12, 2)
  date              DateTime
  isRecurring       Boolean  @default(false)
  recurringInterval String?
  notes             String?
  receiptUrl        String?
  categoryId        String
  accountId         String
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  account  Account  @relation(fields: [accountId], references: [id])

  @@map("expenses")
}

model Budget {
  id         String       @id @default(cuid())
  name       String
  amount     Decimal      @db.Decimal(12, 2)
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean      @default(true)
  categoryId String
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, userId, period])
  @@map("budgets")
}

model Transfer {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(12, 2)
  description   String
  date          DateTime
  notes         String?
  fromAccountId String
  toAccountId   String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount Account @relation("TransferFrom", fields: [fromAccountId], references: [id])
  toAccount   Account @relation("TransferTo", fields: [toAccountId], references: [id])

  @@map("transfers")
}
